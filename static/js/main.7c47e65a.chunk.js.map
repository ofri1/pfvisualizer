{"version":3,"sources":["components/node.js","App.js","serviceWorker.js","index.js"],"names":["classList","Node","props","this","onChange","posx","posy","className","color","onClick","handleClick","bind","Component","strList","App","state","stage","nodes","start","x","y","end","order","i","tcols","j","push","ntype","changeType","value","newNodes","node","newNode","setState","prevx","prevy","nodePrev","prev","newPrev","changeColor","finished","setTimeout","length","routeOrder","unshift","stack","count","curNode","shift","curX","curY","colorNodes","changePrev","size","button","handleStart","map","col","colIDX","key","nodeIDX","changeStage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7c47e65a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst classList = [\r\n  \"btn btn-secondary\", // 0\r\n  \"btn btn-success\", // 1 - Start\r\n  \"btn btn btn-danger\", // 2 - End\r\n  \"btn btn btn-primary\", // 3 - Obstacle\r\n  \"btn btn-secondary\", // 4 - checked\r\n  \"btn btn-warning\", // 5 - visited\r\n  \"btn btn-info\", // 6 - part of route\r\n];\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.onChange(this.props.posx, this.props.posy);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          className={classList[this.props.color]}\r\n          onClick={this.handleClick.bind(this)}\r\n        >\r\n          {/*this.props.ntype*/}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Node from \"./components/node\";\r\n\r\nconst strList = [\"Pick a start\", \"Pick an end\", \"Place obstacles\"];\r\nconst size = 10;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      stage: 0,\r\n      nodes: [],\r\n      start: { x: -1, y: -1 },\r\n      end: { x: -1, y: -1 },\r\n      order: [],\r\n    };\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      const tcols = [];\r\n      for (let j = 0; j < size; j++) {\r\n        tcols.push({ x: i, y: j, ntype: 0, color: 0 });\r\n      }\r\n      this.state.nodes.push(tcols);\r\n    }\r\n\r\n    this.changeType.bind(this);\r\n  }\r\n\r\n  changeType(x, y, value) {\r\n    const newNodes = this.state.nodes;\r\n    const node = newNodes[x][y];\r\n    const newNode = {\r\n      ...node,\r\n      ntype: value,\r\n    };\r\n    newNodes[x][y] = newNode;\r\n\r\n    this.setState({ nodes: newNodes });\r\n  }\r\n\r\n  changePrev(x, y, prevx, prevy) {\r\n    const newNodes = this.state.nodes;\r\n    const nodePrev = newNodes[x][y].prev;\r\n    const newPrev = {\r\n      ...nodePrev,\r\n      x: prevx,\r\n      y: prevy,\r\n    };\r\n    newNodes[x][y].prev = newPrev;\r\n\r\n    this.setState({ nodes: newNodes });\r\n  }\r\n\r\n  changeColor(x, y, value) {\r\n    const newNodes = this.state.nodes;\r\n    const node = newNodes[x][y];\r\n    const newNode = {\r\n      ...node,\r\n      color: value,\r\n    };\r\n    newNodes[x][y] = newNode;\r\n\r\n    this.setState({ nodes: newNodes });\r\n  }\r\n\r\n  changeStage(x, y) {\r\n    if (this.state.stage === 0) {\r\n      this.setState({ stage: 1, start: { x: x, y: y } });\r\n      this.changeType(x, y, 1);\r\n      this.changeColor(x, y, 1);\r\n    } else if (this.state.stage === 1) {\r\n      this.setState({ stage: 2, end: { x: x, y: y } });\r\n      this.changeType(x, y, 2);\r\n      this.changeColor(x, y, 2);\r\n    } else if (this.state.stage === 2) {\r\n      this.changeType(x, y, 3);\r\n      this.changeColor(x, y, 3);\r\n    }\r\n  }\r\n\r\n  colorNodes(finished = true) {\r\n    for (let i = 0; i < this.state.order.length; i++) {\r\n      let node = this.state.order[i];\r\n      setTimeout(() => {\r\n        if (\r\n          !(node.x === this.state.end.x && node.y === this.state.end.y) &&\r\n          !(node.x === this.state.start.x && node.y === this.state.start.y)\r\n        ) {\r\n          this.changeColor(this.state.order[i].x, this.state.order[i].y, 5);\r\n        }\r\n      }, i * 200);\r\n    }\r\n\r\n    if (finished) {\r\n      let routeOrder = [];\r\n\r\n      let node = this.state.nodes[this.state.end.x][this.state.end.y].prev;\r\n      while (\r\n        !(node.x === this.state.start.x && node.y === this.state.start.y)\r\n      ) {\r\n        routeOrder.unshift(node);\r\n        node = this.state.nodes[node.x][node.y].prev;\r\n      }\r\n\r\n      for (let i = 0; i < routeOrder.length; i++) {\r\n        let node = routeOrder[i];\r\n        setTimeout(() => {\r\n          this.changeColor(routeOrder[i].x, routeOrder[i].y, 6);\r\n        }, (i + this.state.order.length) * 200);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleStart() {\r\n    let stack = [this.state.start];\r\n    let count = 1;\r\n    this.setState({ stage: 3 });\r\n    while (stack.length > 0 && count < 500) {\r\n      count++;\r\n      const curNode = stack.shift();\r\n      const curX = curNode.x;\r\n      const curY = curNode.y;\r\n\r\n      this.changeType(curX, curY, 5);\r\n      this.state.order.push(curNode);\r\n\r\n      if (curNode.x === this.state.end.x && curNode.y === this.state.end.y) {\r\n        this.colorNodes();\r\n        return;\r\n      }\r\n\r\n      if (\r\n        curX > 0 &&\r\n        (this.state.nodes[curX - 1][curY].ntype === 0 ||\r\n          this.state.nodes[curX - 1][curY].ntype === 2)\r\n      ) {\r\n        this.changeType(curX - 1, curY, 4);\r\n        this.changePrev(curX - 1, curY, curX, curY);\r\n        stack.push({ x: curX - 1, y: curY });\r\n      }\r\n\r\n      if (\r\n        curY > 0 &&\r\n        (this.state.nodes[curX][curY - 1].ntype === 0 ||\r\n          this.state.nodes[curX][curY - 1].ntype === 2)\r\n      ) {\r\n        this.changeType(curX, curY - 1, 4);\r\n        this.changePrev(curX, curY - 1, curX, curY);\r\n        stack.push({ x: curX, y: curY - 1 });\r\n      }\r\n\r\n      if (\r\n        curY < size - 1 &&\r\n        (this.state.nodes[curX][curY + 1].ntype === 0 ||\r\n          this.state.nodes[curX][curY + 1].ntype === 2)\r\n      ) {\r\n        this.changeType(curX, curY + 1, 4);\r\n        this.changePrev(curX, curY + 1, curX, curY);\r\n        stack.push({ x: curX, y: curY + 1 });\r\n      }\r\n\r\n      if (\r\n        curX < size - 1 &&\r\n        (this.state.nodes[curX + 1][curY].ntype === 0 ||\r\n          this.state.nodes[curX + 1][curY].ntype === 2)\r\n      ) {\r\n        this.changeType(curX + 1, curY, 4);\r\n        this.changePrev(curX + 1, curY, curX, curY);\r\n        stack.push({ x: curX + 1, y: curY });\r\n      }\r\n    }\r\n    this.colorNodes(false);\r\n  }\r\n\r\n  render() {\r\n    let button;\r\n    if (this.state.stage === 2) {\r\n      button = (\r\n        <button\r\n          className=\"btn btn-success m-2\"\r\n          onClick={this.handleStart.bind(this)}\r\n        >\r\n          Start\r\n        </button>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>BFS Visualizer</h1>\r\n          <div className=\"row\">\r\n            <p>{strList[this.state.stage]}</p>\r\n            {button}\r\n          </div>\r\n          <div className=\"container\">\r\n            {this.state.nodes.map((col, colIDX) => (\r\n              <div className=\"row\" key={colIDX}>\r\n                {col.map((node, nodeIDX) => (\r\n                  <div className=\"col\" key={(colIDX, nodeIDX)}>\r\n                    <Node\r\n                      onChange={this.changeStage.bind(this)}\r\n                      posx={node.x}\r\n                      posy={node.y}\r\n                      color={node.color}\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <h6>\r\n            Green = start, Red = end, Blue = obstacle, Yellow = visited, Cyan =\r\n            optimal route\r\n          </h6>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}